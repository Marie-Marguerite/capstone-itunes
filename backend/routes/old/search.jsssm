// routes/search.js

const express = require("express");
const axios = require("axios");
const asyncHandler = require("../../middleware/asyncHandler");
const verifyToken = require("../../middleware/auth");

const router = express.Router();

//* Dummy token generator for the frontend to use
router.get("/token", (req, res) => {
  res.json({ token: "dummy.jwt.token.here" });
});

// ============================
//* MAIN SEARCH / LOOKUP ROUTE
//  GET /api/search?ArtistId=xxxx&entity={entity}&limit={xxxx}&offset={xxxx}
router.get(
  "/",
  verifyToken,
  asyncHandler(async (req, res) => {
    //? why are limit and offset not receiving the right data when search context is giving it to them.
    const {
      artistId,
      entity = "",
      limit: limitRaw,
      offset: offsetRaw,
    } = req.query;

    const limit = parseInt(req.query.limit, 10) || 0;
    const offset = parseInt(req.query.limit, 10) || 0;



    // * 2. SEARCH BY TERM

    let { term } = req.query;
    // REQUIRE SEARCH TERM
    if (!term) {
      return res
        .status(400)
        .json({ message: "No search term provided/received" });
    }
    const encodedTerm = encodeURIComponent(term);

    // GET DUMMY TOKEN
    // const tokenRes = await axios.get(
    //   `${req.protocol}://${req.get("host")}/api/search/token`
    // );
    // const token = tokenRes.data.token;

    // -------
    //* 2.1 SINGLE-ENTITY "SHOW MORE" CALLS
    // If an entity type is provided = "show more"

    // BUILD SEARCH URL
    if (entity) {
      const url =
        `https://itunes.apple.com/search` +
        `?term=${encodedTerm}` +
        `&entity=${encodeURIComponent(entity)}` +
        `&limit=${limit}` +
        `&offset=${offset}`;

      // MAKE REQUEST
      const { data } = await axios.get(url);
      // let results = data.results;

      // SIMPLIFY RESPONSE
      const simplifiedResults = data.results.map((item) => ({
        artistName: item.artistName,
        artistId: item.artistId,
        trackName: item.trackName,
        collectionName: item.collectionName,
        collectionId: item.collectionId,
        artworkUrl100: item.artworkUrl100,
        artworkUrl600: item.artworkUrl600,
        releaseDate: item.releaseDate,
        wrapperType: item.wrapperType,
        artistType: item.artistType,
        kind: item.kind,
        previewUrl: item.previewUrl,
        collectionViewUrl: item.collectionViewUrl,
      }));

      return res.json(simplifiedResults);
    }

    // ===================================
    //* 2.2 INITIAL CALL TO DISPLAY ALL
    // If no entity type is provided, do parallel calls for slice of every entity

    // DEFINE EACH ENTITY TO FETCH
    const entities = [
      "song",
      "musicArtist",
      "album",
      "audiobook",
      "ebook",
      "podcast",
      "podcastAuthor",
      "podcastEpisode",
    ];

    try {
      // FIRE ONE REQUEST PER ENTITY
      const responses = await Promise.all(
        entities.map((entity) => {
          return axios.get("https://itunes.apple.com/search", {
            params: {
              term,
              entity,
              limit,
              offset,
            },
          });
        })
      );

      // CONSOLE.LOG: SEE WHAT CAME IN
      console.log(
        "PARALLEL RESPONSES:",
        responses.map((r) => ({
          entity: r.config.params.entity,
          count: r.data.results.length,
        }))
      );

      // COMBINE ALL RESULTS
      const allRaw = responses.flatMap((r) => r.data.results.slice(0, limit));

      // REMOVE DUPLICATE BY collectionViewUrl / trackViewUrl / artistViewUrl / trackId
      const uniqueMap = new Map();
      allRaw.forEach((item) => {
        const key =
          item.collectionViewUrl ||
          item.trackViewUrl ||
          item.artistViewUrl ||
          item.collectionId?.toString() ||
          item.trackId?.toString() ||
          item.artistId?.toString();

        if (!key) return;
        if (!uniqueMap.has(key)) {
          uniqueMap.set(key, item);
        }
      });

      const uniqueResults = Array.from(uniqueMap.values());

      // SIMPLIFY THE RESPONSE OBJECT FOR FRONTEND
      const simplifiedResults = uniqueResults.map((item) => ({
        artistName: item.artistName,
        artistId: item.artistId,
        trackName: item.trackName,
        collectionName: item.collectionName,
        collectionId: item.collectionId,
        artworkUrl100: item.artworkUrl100,
        artworkUrl600: item.artworkUrl600,
        releaseDate: item.releaseDate,
        wrapperType: item.wrapperType,
        artistType: item.artistType,
        kind: item.kind,
        previewUrl: item.previewUrl,
        collectionViewUrl: item.collectionViewUrl,
      }));
      return res.json(simplifiedResults);
    } catch (error) {
      console.error(
        "itunes parallel-fetch error (2.2):",
        error.res?.data || error.message
      );
      return res.status(502).json({ message: "itunes API Error" });
    }
  })
);

module.exports = router;
